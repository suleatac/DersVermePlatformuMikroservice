services:
  # microservice.catalog.api:
  #   image: ${DOCKER_REGISTRY-}microservicecatalogapi
  #   build:
  #     context: .
  #     dockerfile: Microservice.Catalog.Api/Dockerfile

  mongo.db.catalog:
    restart: always
    image: mongo:8.0-rc
    container_name: mongo.db.catalog.container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27030:27017"
    volumes:
      - mongo.db.catalog.volume:/data/db
  mongo.db.catalog.ui:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongo.db.catalog.ui.container
    restart: always
    depends_on:
      - mongo.db.catalog
    ports:
      - "27032:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo.db.catalog:27017/
      ME_CONFIG_BASICAUTH: false
  mongo.db.discount:
    restart: always
    image: mongo:8.0-rc
    container_name: mongo.db.discount.container
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "27034:27017"
    volumes:
      - mongo.db.discount.volume:/data/db
  mongo.db.discount.ui:
    image: mongo-express:1.0.2-20-alpine3.19
    container_name: mongo.db.discount.ui.container
    restart: always
    depends_on:
      - mongo.db.discount
    ports:
      - "27036:8081"
    environment:
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongo.db.discount:27017/
      ME_CONFIG_BASICAUTH: false
  redis.db.basket:
    restart: always
    image: redis:7.0-alpine
    container_name: redis.db.container
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    ports:
      - "6379:6379"
    volumes:
      - redis.db.basket.volume:/data
  redis.db.basket.ui:
    image: rediscommander/redis-commander:latest
    container_name: redis.db.basket.ui.container
    restart: always
    depends_on:
      - redis.db.basket
    ports:
      - "27033:8081"
    environment:
      REDIS_HOST: redis.db.basket
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      HTTP_USER: ${REDIS_UI_USERNAME}
      HTTP_PASSWORD: ${REDIS_UI_PASSWORD}
  sqlserver.db.order:
    restart: always
    user: root # user: "1000:1000" # SQL Server needs to run with its own permissions
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver.db.order.container
    environment:
     SA_PASSWORD: "${MSSQL_SA_PASSWORD}"
     ACCEPT_EULA: "Y"
    healthcheck:
      test: >
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "${MSSQL_SA_PASSWORD}" -Q "SELECT 1" -b -o /dev/null
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    ports:
      - "1433:1433"
    volumes:
      - sqlserver.db.order.volume:/var/opt/mssql
  keycloak:
    restart: always
    container_name: keycloak.container
    image: quay.io/keycloak/keycloak:25.0
    command: start-dev
    environment:
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT_BACKCHANNEL: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HOSTNAME_STRICT_HTTP: false
      KC_HEALTH_ENABLED: true
      KC_DB: postgres
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB_URL: jdbc:postgresql://postgres.db.keycloak/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "8080:8080"
    volumes:
      - keycloak-data:/opt/keycloak/data  
    depends_on:
      - postgres.db.keycloak
  postgres.db.keycloak:
    restart: always
    image: postgres:16.2
    container_name: postgres.db.keycloak.container
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      -  postgres.db.keycloak.volume:/var/lib/postgresql/data
  postgres.db.keycloak.ui:
    restart: always
    image: dpage/pgadmin4
    container_name: postgres.db.keycloak.ui.container
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - postgres.db.keycloak.ui.data:/var/lib/pgadmin
  rabbitmq:
    restart: always
    image: rabbitmq:3.13.7-management
    container_name: rabbitmq.container
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
 
      
  microservice.basket.api:
    image: microservicebasketapi
    build:
      context: .
      dockerfile: Microservice.Basket.Api/Dockerfile

  microservice.catalog.api:
    image: microservicecatalogapi
    build:
      context: .
      dockerfile: Microservice.Catalog.Api/Dockerfile

  mikroservice.discount.api:
    image: mikroservicediscountapi
    build:
      context: .
      dockerfile: Mikroservice.Discount.Api/Dockerfile

  microservice.file.api:
    image: microservicefileapi
    build:
      context: .
      dockerfile: Microservice.File.Api/Dockerfile

  microservice.gateway:
    image: microservicegateway
    build:
      context: .
      dockerfile: Microservice.Gateway/Dockerfile

  mikroservice.order.api:
    image: mikroserviceorderapi
    build:
      context: .
      dockerfile: Mikroservice.Order.Api/Dockerfile

  microservice.payment.api:
    image: microservicepaymentapi
    build:
      context: .
      dockerfile: Microservice.Payment.Api/Dockerfile

  mikroservice.web:
    image: mikroserviceweb
    build:
      context: .
      dockerfile: Mikroservice.web/Dockerfile

volumes:
  mongo.db.catalog.volume:
  mongo.db.discount.volume:  
  redis.db.basket.volume:    
  sqlserver.db.order.volume: 
  postgres.db.keycloak.volume:
  postgres.db.keycloak.ui.data:
  keycloak-data:
  rabbitmq_data:
  









